#!/usr/bin/env python3
"""Manual test of pricing functionality"""

import asyncio
import sys
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from domain.booking.pricing import PricingRequest
from application.services.pricing_service import PricingService
from infrastructure.llm.extractors.pricing_extractor import PricingExtractor


async def test_pricing_functionality():
    """Test the complete pricing functionality"""
    print("üß™ Testing pricing functionality...")
    
    try:
        # Test 1: PricingService initialization
        print("\n1. Initializing PricingService...")
        pricing_service = PricingService()
        print(f"   ‚úì Loaded {len(pricing_service.tariff_rates)} tariff rates")
        
        # Test 2: Basic pricing calculation
        print("\n2. Testing basic pricing calculation...")
        request = PricingRequest(tariff_id=1, duration_days=1)
        response = await pricing_service.calculate_pricing(request)
        print(f"   ‚úì Calculated price: {response.breakdown.total_cost} —Ä—É–±")
        print(f"   ‚úì Message: {response.formatted_message[:50]}...")
        
        # Test 3: Multi-day pricing
        print("\n3. Testing multi-day pricing...")
        request = PricingRequest(tariff_id=1, duration_days=2)
        response = await pricing_service.calculate_pricing(request)
        print(f"   ‚úì Multi-day price: {response.breakdown.total_cost} —Ä—É–±")
        
        # Test 4: Pricing with add-ons
        print("\n4. Testing pricing with add-ons...")
        request = PricingRequest(tariff_id=0, duration_days=1, add_ons=["sauna", "secret_room"])
        response = await pricing_service.calculate_pricing(request)
        print(f"   ‚úì Price with add-ons: {response.breakdown.total_cost} —Ä—É–±")
        print(f"   ‚úì Add-ons: {list(response.breakdown.add_on_costs.keys())}")
        
        # Test 5: Natural language extraction
        print("\n5. Testing natural language extraction...")
        extractor = PricingExtractor()
        
        test_queries = [
            "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—É—Ç–æ—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –æ—Ç 3 —á–µ–ª–æ–≤–µ–∫",
            "—Ü–µ–Ω–∞ 12-—á–∞—Å–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ —Å —Å–∞—É–Ω–æ–π",
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É—Ç–æ—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –¥–≤–æ–∏—Ö –Ω–∞ 2 –¥–Ω—è"
        ]
        
        for query in test_queries:
            request = await extractor.extract_pricing_requirements(query)
            print(f"   ‚úì '{query}' -> tariff: '{request.tariff}', days: {request.duration_days}")
        
        # Test 6: Tariff summary
        print("\n6. Testing tariff summary...")
        summary = await pricing_service.get_tariffs_summary()
        print(f"   ‚úì Generated summary ({len(summary)} characters)")
        print(f"   Preview: {summary[:100]}...")
        
        print("\nüéâ All tests passed successfully!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_russian_pricing_queries():
    """Test Russian pricing queries"""
    print("\nüá∑üá∫ Testing Russian pricing queries...")
    
    extractor = PricingExtractor()
    pricing_service = PricingService()
    
    test_queries = [
        "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—É—Ç–æ—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –æ—Ç 3 —á–µ–ª–æ–≤–µ–∫",
        "—Ü–µ–Ω–∞ 12-—á–∞—Å–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞",
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å—É—Ç–æ—á–Ω–æ–≥–æ –¥–ª—è –¥–≤–æ–∏—Ö –Ω–∞ 3 –¥–Ω—è —Å —Å–∞—É–Ω–æ–π",
        "–∫–∞–∫–∏–µ —É –≤–∞—Å —Ü–µ–Ω—ã",
        "—Ç–∞—Ä–∏—Ñ—ã –∏ —Ä–∞—Å—Ü–µ–Ω–∫–∏"
    ]
    
    for query in test_queries:
        print(f"\nQuery: '{query}'")
        
        # Test extraction
        request = await extractor.extract_pricing_requirements(query)
        print(f"  Extracted: tariff='{request.tariff}', days={request.duration_days}, add_ons={request.add_ons}")
        
        # Test pricing calculation if specific tariff found
        if request.tariff or request.tariff_id:
            try:
                response = await pricing_service.calculate_pricing(request)
                print(f"  Price: {response.breakdown.total_cost} —Ä—É–±")
                print(f"  Message preview: {response.formatted_message[:80]}...")
            except Exception as e:
                print(f"  Price calculation failed: {e}")


if __name__ == "__main__":
    print("üöÄ Starting pricing functionality tests...\n")
    
    # Run the tests
    success = asyncio.run(test_pricing_functionality())
    
    if success:
        asyncio.run(test_russian_pricing_queries())
    
    print("\n‚úÖ Manual testing complete!")