"""
–£–∑–µ–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
"""

from typing import Any

from application.services.pricing_service import PricingService
from core.logging import get_logger
from infrastructure.llm.extractors.pricing_extractor import PricingExtractor
from infrastructure.llm.graphs.common.graph_state import AppState

logger = get_logger(__name__)
pricing_service = PricingService()
pricing_extractor = PricingExtractor()


async def pricing_node(s: AppState) -> dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PricingExtractor –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
    –∏ PricingService –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
    """
    user_text = s.get("text", "")
    logger.info("Processing pricing request", extra={"user_text": user_text})

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤
        if pricing_extractor.extract_comparison_request(user_text):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ–±–∑–æ—Ä –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
            reply = await pricing_service.get_tariffs_summary()
            reply += "\n\nüí¨ –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π."

            return {
                "reply": reply,
                "intent": "price",
                "pricing_data": {"type": "comparison", "all_tariffs": True},
            }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é
        pricing_request = await pricing_extractor.extract_pricing_requirements(user_text)

        logger.debug(
            "Extracted pricing requirements",
            extra={
                "user_text": user_text,
                "pricing_request": pricing_request.dict(exclude_none=True),
            },
        )

        # –ï—Å–ª–∏ –Ω–µ –∏–∑–≤–ª–µ–∫–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –Ω–æ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if not pricing_request.tariff and pricing_extractor.is_pricing_query(user_text):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
            reply = await pricing_service.get_tariffs_summary()
            reply += "\n\nüí° –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ:"
            reply += "\n‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —Ç–∞—Ä–∏—Ñ"
            reply += "\n‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"
            reply += "\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)"
            reply += "\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *'–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—É—Ç–æ—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ 3 –¥–Ω—è —Å —Å–∞—É–Ω–æ–π?'*"

            return {
                "reply": reply,
                "intent": "price",
                "pricing_data": {"type": "general_inquiry"},
            }

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        pricing_response = await pricing_service.calculate_pricing(pricing_request)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        reply = pricing_response.formatted_message
        if pricing_response.booking_suggestion:
            reply += f"\n\n{pricing_response.booking_suggestion}"

        return {
            "reply": reply,
            "intent": "price",
            "pricing_data": {
                "breakdown": pricing_response.breakdown.dict(),
                "request": pricing_request.dict(exclude_none=True),
                "valid_until": pricing_response.valid_until.isoformat(),
            },
        }

    except ValueError as ve:
        # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)
        logger.warning("Validation error in pricing_node", extra={
            "user_text": user_text,
            "error": str(ve)
        })

        reply = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n\n"
        reply += await pricing_service.get_tariffs_summary()
        reply += "\nüí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤."

        return {
            "reply": reply,
            "intent": "price",
            "error": "unknown_tariff",
        }

    except Exception as e:
        logger.exception("Error in pricing_node", extra={"user_text": user_text})

        reply = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
        reply += "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        reply += "\n\nüí° –ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:"
        reply += "\n*'–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—É—Ç–æ—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –¥–≤–æ–∏—Ö –Ω–∞ 2 –¥–Ω—è?'*"

        return {
            "reply": reply,
            "intent": "price",
            "error": str(e),
        }
