from typing import Optional
from langgraph.graph import StateGraph, START, END
from langgraph.checkpoint.memory import MemorySaver
from core.utils.datetime_helper import is_date, is_time, norm_date, norm_time
from halper.string_halper import parse_yes_no
from infrastructure.llm.extractors import booking_extractor
from infrastructure.llm.graphs.common.graph_state import BookingState

REQUIRED = ["TARIFF","START_DATE","START_TIME","FINISH_DATE","FINISH_TIME",
            "FIRST_BEDROOM","SECOND_BEDROOM","SAUNA","PHOTOSHOOT","SECRET_ROOM",
            "NUMBER_GUESTS","CONTACT","COMMENT"]
QUESTIONS = {
    "TARIFF": "–£–∫–∞–∂–∏ —Ç–∞—Ä–∏—Ñ: `12 —á–∞—Å–æ–≤`, `–°—É—Ç–æ—á–Ω–æ –¥–ª—è –ø–∞—Ä`, `–°—É—Ç–æ—á–Ω–æ –æ—Ç 3-–µ—Ö —á–µ–ª–æ–≤–µ–∫`, `–ò–Ω–∫–æ–Ω–∏—Ç–æ 12 —á–∞—Å–æ–≤`, `–ò–Ω–∫–æ–≥–Ω–∏—Ç–æ –Ω–∞ —Å—É—Ç–∫–∏`, `–†–∞–±–æ—á–∏–π`.",
    "START_DATE": "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? `–î–î.–ú–ú` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì`.",
    "START_TIME": "–í—Ä–µ–º—è –∑–∞–µ–∑–¥–∞? `HH:MM`.",
    "FINISH_DATE": "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? `–î–î.–ú–ú` –∏–ª–∏ `–î–î.–ú–ú.–ì–ì–ì–ì`.",
    "FINISH_TIME": "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞? `HH:MM`.",
    "FIRST_BEDROOM": "–ù—É–∂–Ω–∞ –ø–µ—Ä–≤–∞—è —Å–ø–∞–ª—å–Ω—è? (`–¥–∞`/`–Ω–µ—Ç`)",
    "SECOND_BEDROOM": "–ù—É–∂–Ω–∞ –≤—Ç–æ—Ä–∞—è —Å–ø–∞–ª—å–Ω—è? (`–¥–∞`/`–Ω–µ—Ç`)",
    "SAUNA": "–î–æ–±–∞–≤–∏—Ç—å —Å–∞—É–Ω—É? (`–¥–∞`/`–Ω–µ—Ç`)",
    "PHOTOSHOOT": "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ—Å—ä—ë–º–∫–∞? (`–¥–∞`/`–Ω–µ—Ç`)",
    "SECRET_ROOM": "–ù—É–∂–Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞? (`–¥–∞`/`–Ω–µ—Ç`)",
    "NUMBER_GUESTS": "–°–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π –±—É–¥–µ—Ç? –£–∫–∞–∂–∏ —á–∏—Å–ª–æ–º.",
    "CONTACT": "–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: `@username` –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Å `+`.",
    "COMMENT": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –±—Ä–æ–Ω–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ `–Ω–µ—Ç`)."
    }

booking_extractor = booking_extractor.BookingExtractor()

def _first_missing(ctx: dict) -> Optional[str]:
    for f in REQUIRED:
        if f not in ctx or ctx[f] in (None,""):
            return f
    return None

async def ask_or_fill(state: BookingState) -> BookingState:
    ctx = dict(state.get("context", {}))
    text = (state.get("text") or "").strip()

    # 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º LLM-–ø–∞—Ä—Å–µ—Ä: –æ–Ω –º–æ–∂–µ—Ç –≤—ã—Ç–∞—â–∏—Ç—å —Å—Ä–∞–∑—É –ø–∞—á–∫—É –ø–æ–ª–µ–π
    if text:
        try:
            parsed = await booking_extractor.aextract(text)
            if parsed:
                ctx.update(parsed)
        except Exception:
            # –Ω–µ —Ä–æ–Ω—è–µ–º –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ
            pass

    # 2) –°—Ç—Ä–æ–≥–æ–µ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–≥–æ –ø–æ–ª—è –ø–æ –æ—Ç–≤–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    miss = _first_missing(ctx)
    if miss:
        if miss == "TARIFF":
            low = text.lower()
            if "12" in low:
                ctx[miss] = "12 —á–∞—Å–æ–≤"
            elif "—Å—É—Ç" in low or "24" in low or "–¥–µ–Ω—å" in low:
                ctx[miss] = "1 —Å—É—Ç–∫–∏"
        elif miss in {"FIRST_BEDROOM","SECOND_BEDROOM","SAUNA","PHOTOSHOOT","SECRET_ROOM"}:
            v=parse_yes_no(text); 
            if v is not None: ctx[miss]=v
        elif miss in {"START_DATE","FINISH_DATE"} and is_date(text):
            ctx[miss]=norm_date(text)
        elif miss in {"START_TIME","FINISH_TIME"} and is_time(text):
            ctx[miss]=norm_time(text)
        elif miss=="NUMBER_GUESTS" and text.isdigit() and int(text)>0:
            ctx[miss]=int(text)
        elif miss=="CONTACT" and (text.startswith("@") or text.startswith("+")):
            ctx[miss]=text
        elif miss=="COMMENT":
            ctx[miss]=None if text.lower() in {"–Ω–µ—Ç","no","-"} else text

    # 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    miss = _first_missing(ctx)
    if miss:
        return {
            "context": ctx,
            "reply": QUESTIONS[miss],
            "done": False,
            "await_input": True,
            "last_asked": miss,
            "active_subgraph": "booking"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ
        }

    # 4) –í—Å–µ –ø–æ–ª—è —Å–æ–±—Ä–∞–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ –∏ –∂–¥—ë–º "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"
    summary = (
        "üìã –†–µ–∑—é–º–µ –∑–∞—è–≤–∫–∏:\n"
        f"–¢–∞—Ä–∏—Ñ: {ctx['TARIFF']}\n"
        f"–ó–∞–µ–∑–¥: {ctx['START_DATE']} {ctx['START_TIME']}\n"
        f"–í—ã–µ–∑–¥: {ctx['FINISH_DATE']} {ctx['FINISH_TIME']}\n"
        f"1-—è —Å–ø–∞–ª—å–Ω—è: {'–¥–∞' if ctx['FIRST_BEDROOM'] else '–Ω–µ—Ç'}\n"
        f"2-—è —Å–ø–∞–ª—å–Ω—è: {'–¥–∞' if ctx['SECOND_BEDROOM'] else '–Ω–µ—Ç'}\n"
        f"–°–∞—É–Ω–∞: {'–¥–∞' if ctx['SAUNA'] else '–Ω–µ—Ç'}\n"
        f"–§–æ—Ç–æ—Å—ä—ë–º–∫–∞: {'–¥–∞' if ctx['PHOTOSHOOT'] else '–Ω–µ—Ç'}\n"
        f"–°–µ–∫—Ä–µ—Ç–Ω–∞—è: {'–¥–∞' if ctx['SECRET_ROOM'] else '–Ω–µ—Ç'}\n"
        f"–ì–æ—Å—Ç–µ–π: {ctx['NUMBER_GUESTS']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {ctx['CONTACT']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {ctx['COMMENT'] or '‚Äî'}\n"
        "–ù–∞–ø–∏—à–∏ `–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é` –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º."
    )
    return {
            "context": ctx,
            "reply": summary,
            "done": True,
            "await_input": True,  # ‚Üê —ç—Ç–æ —á–∏—Ç–∞–µ—Ç branch() –∏ —É–≤–æ–¥–∏—Ç –≤ END
            "active_subgraph": "booking"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ
        }

async def finalize(state: BookingState)->BookingState:
    ctx = state["context"]
    # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ—Ç / –ø—Ä–∞–≤–∏–ª–∞
    # booking_id = await create_booking(ctx)
    booking_id = 1111
    return {"reply": f"–ì–æ—Ç–æ–≤–æ! –ë—Ä–æ–Ω—å {booking_id}. ‚úÖ", "done": True}

def branch(s):
    t = (s.get("text") or "").strip().lower()
    if s.get("done") and t == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é":
        return "final"

    if s.get("await_input"):
        return "await"     # ‚Üí –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ

    return "continue"

def build_booking_graph():
    g = StateGraph(BookingState)

    g.add_node("ask_or_fill", ask_or_fill)  # –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å—ã/LLM-–ø–∞—Ä—Å–∏–º/–¥–æ—Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—è
    g.add_node("finalize", finalize)        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å, —à–ª—ë–º –∏—Ç–æ–≥
    g.add_edge(START, "ask_or_fill")
    g.add_conditional_edges(
        "ask_or_fill",  
        branch,
        {
            "final": "finalize",
            "await": END,           # ‚úÖ –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            "continue": "ask_or_fill",
        },
    )

    g.add_edge("finalize", END) 

    memory = MemorySaver()
    app = g.compile(checkpointer=memory)
    gen_png_graph(app)
    return app

def gen_png_graph(app_obj, name_photo: str = "graph.png") -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª.
    
    Args:
        app_obj: –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∞
        name_photo: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "graph.png")
    """
    with open(name_photo, "wb") as f:
        f.write(app_obj.get_graph().draw_mermaid_png())
