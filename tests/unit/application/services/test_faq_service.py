"""
Unit tests for LLM-powered FAQService
"""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from application.services.faq_service import FAQService
from domain.faq.entities import FAQContext, FAQResponse


class TestFAQService:
    """Tests for LLM-powered FAQService"""

    @pytest.fixture
    def mock_llm_response(self):
        """Mock LLM response"""
        mock_response = MagicMock()
        mock_response.content = "–ü—Ä–∏–≤–µ—Ç! The Secret House –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã: –∑–µ–ª–µ–Ω—É—é –∏ –±–µ–ª—É—é —Å–ø–∞–ª—å–Ω–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç –º–µ–Ω—é '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'!"
        return mock_response

    @pytest.fixture
    def faq_service(self):
        """Create FAQService instance with mocked LLM"""
        with patch("application.services.faq_service.get_llm") as mock_get_llm:
            mock_llm = AsyncMock()
            mock_get_llm.return_value = mock_llm
            service = FAQService()
            service.llm = mock_llm
            return service

    @pytest.mark.asyncio
    async def test_get_faq_response_basic_question(
        self, faq_service, mock_llm_response
    ):
        """Test LLM-powered FAQ response for basic question"""
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_llm_response)
        question = "–∫–∞–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å –≤ –¥–æ–º–µ?"

        response = await faq_service.get_faq_response(question)

        assert isinstance(response, FAQResponse)
        assert isinstance(response.answer, str)
        assert len(response.answer) > 0
        assert response.tokens_used >= 0
        assert response.response_time >= 0
        assert isinstance(response.suggested_actions, list)

        # Check that LLM was called
        faq_service.llm.ainvoke.assert_called_once()

        # Check that system prompt includes house information
        call_args = faq_service.llm.ainvoke.call_args[0][0]
        system_message = call_args[0]
        assert "The Secret House" in system_message.content
        assert "–∑–µ–ª–µ–Ω–∞—è —Å–ø–∞–ª—å–Ω—è" in system_message.content.lower()

    @pytest.mark.asyncio
    async def test_get_faq_response_with_context(self, faq_service, mock_llm_response):
        """Test FAQ response with conversation context"""
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_llm_response)

        context = FAQContext(
            conversation_history=[
                {"role": "user", "content": "—á—Ç–æ –µ—Å—Ç—å –≤ –¥–æ–º–µ?"},
                {"role": "assistant", "content": "–ï—Å—Ç—å —Å–ø–∞–ª—å–Ω–∏, –∫—É—Ö–Ω—è, —Å–∞—É–Ω–∞"},
            ]
        )
        question = "–∞ —Å–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?"

        response = await faq_service.get_faq_response(question, context)

        assert isinstance(response, FAQResponse)
        assert response.tokens_used >= 0

        # Check that conversation history was included
        call_args = faq_service.llm.ainvoke.call_args[0][0]
        assert len(call_args) > 2  # System + history + current question

    @pytest.mark.asyncio
    async def test_get_faq_response_booking_suggestion(self, faq_service):
        """Test that booking suggestions are extracted correctly"""
        mock_response = MagicMock()
        mock_response.content = (
            "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—É–Ω–∫—Ç –º–µ–Ω—é '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å'"
        )
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_response)

        question = "–∫–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å?"
        response = await faq_service.get_faq_response(question)

        assert "booking" in response.suggested_actions

    @pytest.mark.asyncio
    async def test_get_faq_response_pricing_suggestion(self, faq_service):
        """Test that pricing suggestions are extracted correctly"""
        mock_response = MagicMock()
        mock_response.content = (
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞—Ä–∏—Ñ–∞. –¶–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç 180 BYN."
        )
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_response)

        question = "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?"
        response = await faq_service.get_faq_response(question)

        assert "pricing" in response.suggested_actions

    @pytest.mark.asyncio
    async def test_get_faq_response_escalation_detection(self, faq_service):
        """Test escalation to human support detection"""
        mock_response = MagicMock()
        mock_response.content = "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @the_secret_house"
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_response)

        question = "—Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
        response = await faq_service.get_faq_response(question)

        assert response.needs_human_help is True

    @pytest.mark.asyncio
    async def test_get_faq_response_error_handling(self, faq_service):
        """Test error handling when LLM call fails"""
        faq_service.llm.ainvoke = AsyncMock(side_effect=Exception("LLM API error"))

        question = "—Ç–µ—Å—Ç –≤–æ–ø—Ä–æ—Å"
        response = await faq_service.get_faq_response(question)

        assert isinstance(response, FAQResponse)
        assert response.needs_human_help is True
        assert "@the_secret_house" in response.answer
        assert response.tokens_used == 0
        assert response.response_time > 0

    def test_extract_bot_function_suggestions(self, faq_service):
        """Test extraction of bot function suggestions from responses"""
        # Test booking suggestion
        response_text = "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é"
        suggestions = faq_service._extract_bot_function_suggestions(response_text)
        assert "booking" in suggestions

        # Test availability suggestion
        response_text = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"
        suggestions = faq_service._extract_bot_function_suggestions(response_text)
        assert "availability" in suggestions

        # Test certificate suggestion
        response_text = "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        suggestions = faq_service._extract_bot_function_suggestions(response_text)
        assert "certificate" in suggestions

        # Test pricing suggestion
        response_text = "–£–∑–Ω–∞–π—Ç–µ –æ —Ü–µ–Ω–∞—Ö –∏ —Ç–∞—Ä–∏—Ñ–∞—Ö"
        suggestions = faq_service._extract_bot_function_suggestions(response_text)
        assert "pricing" in suggestions

    def test_should_escalate_to_human(self, faq_service):
        """Test human escalation detection logic"""
        # Should escalate
        escalation_responses = [
            "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å",
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
            "–ù–µ —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º",
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å @the_secret_house",
        ]

        for response_text in escalation_responses:
            assert faq_service._should_escalate_to_human(response_text) is True

        # Should not escalate
        normal_response = "–î–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 12 –∫–º –æ—Ç –ú–∏–Ω—Å–∫–∞"
        assert faq_service._should_escalate_to_human(normal_response) is False

    def test_estimate_tokens_used(self, faq_service):
        """Test token usage estimation"""
        from langchain.schema import HumanMessage, SystemMessage

        messages = [
            SystemMessage(content="System prompt content"),
            HumanMessage(content="User question"),
        ]

        mock_response = MagicMock()
        mock_response.content = "Response content"

        tokens = faq_service._estimate_tokens_used(messages, mock_response)
        assert tokens > 0
        assert isinstance(tokens, int)

    @pytest.mark.asyncio
    async def test_russian_unicode_handling(self, faq_service, mock_llm_response):
        """Test proper handling of Russian Unicode text"""
        mock_llm_response.content = "üè† –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É–¥–æ–±—Å—Ç–≤–∞–º–∏! üî•"
        faq_service.llm.ainvoke = AsyncMock(return_value=mock_llm_response)

        question = "—á—Ç–æ —Ç–∞–∫–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞?"
        response = await faq_service.get_faq_response(question)

        assert "üè†" in response.answer
        assert "üî•" in response.answer
        assert "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ" in response.answer
